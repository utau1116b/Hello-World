;--------------------------------------------------
;追加関数ファイル v1.18
;無断再配布ＯＫ、その際改変しても構いません。
;20091108 v1.00  作成 うにゅほのひと
;20091108 v1.01  更新 うにゅほのひと 種族：月人追加
;                                     ハクタク化時の種族も取得可能に改造
;20091114 v1.02  更新 うにゅほのひと フラグ依存の互換処理後も正常に動く様に修正
;                                     ビット操作関数のI/F見直し(バッティングし辛くする為に配列を使用)…あれ、初心者向きじゃないなorz
;20091118 v1.03  更新 うにゅほのひと 酔い加減表示関数追加
;                                     関数の説明がカオスしていたので整理
;                                     @GET_STRAINNAMEの処理内容の見直し
;20091123 v1.04  更新 うにゅほのひと ムード示関数追加
;20091127 v1.05  更新 うにゅほのひと @GET_STRAINNAMEに詳細な種族名をSTR:203に格納するように改造
;                                     エレン、白蓮が妖怪になっていたので魔法使いに修正
;                                     悪魔が複数人いたので追加
;20091201 v1.06  更新 うにゅほのひと @GET_STRAINCORR_VALUE,@GET_STRAINCORRECTにてTEQUIPを1次元配列と勘違いしていたので修正
;20091209 v1.061 更新 うにゅほのひと 旧データ互換処理をコメントアウト(必要な人だけ解除するようにする)
;                                     キャラ番号からキャラ登録番号を取得する関数@GET_REGIST_NOを追加
;20091210 v1.07  更新 うにゅほのひと 朝夜イベント回避関数@EVENT_ESCAPE作成
;                                     朝夜イベント復帰関数@EVENT_BACK作成
;20100105 v1.08  更新 うにゅほのひと 旧データ変換処理を削除、SYSTEM.ERBを修正することとした
;                                     戻り値は整数値の直接指定でないとeramakerだと動かないとのことでI/F見直し
;20100111 v1.09  更新 うにゅほのひと 酒気ゲージの表示関連の見直し
;20100219 v1.10  更新 うにゅほのひと 朝夜イベント回避時にふたなりを退避復帰対象に追加
;20100303 v1.11  更新 うにゅほのひと リトライ関数@RETRY_OR_LOAD_FUNCを追加
;                                     ロード画面呼び出し関数の@LOAD_FUNCを追加
;                                     指定素質所持者検索関数の@SEARCH_TALENT_FUNCを追加
;20100314 v1.12  更新 うにゅほのひと 素質参照に==1の使用をしない様に変更
;                                     関数の説明に誤りがあったのがあったので修正
;                                     指定素質所持者数カウント関数の@COUNT_TALENT_FUNCを追加
;20100324 v1.13  更新 うにゅほのひと 種族管理関数の初期版に対する互換性処理を削除
;20100404 v1.14  更新 うにゅほのひと 2進数指定で10進数を算出する関数@BIT_DECIMAL2を追加
;                                     BIT_DECIMALに不備が有ったので修正
;20100414 v1.15  更新 うにゅほのひと @EVENT_BACK、@EVENT_ESCAPEをパッチまとめ対応
;                                     最大値取得関数@ADDIN_MAXを追加
;20100523 v1.16  更新 うにゅほのひと @GET_STRAINNAMEにて大妖精のキャラ番号を間違えていたので修正
;20100604 v1.17  更新 うにゅほのひと @GET_REGIST_NO、GET_REGIST_NO_Bの仕様変更
;                                     従来のGET_REGIST_NOは最後に2を付けて使用可能にしています
;20100626 v1.18  更新 うにゅほのひと パッチまとめの人修正分をフィードバック
;20100910 v1.19  更新 うにゅほのひと パッチまとめの人修正分をフィードバック 関数名被りの修正
;20110225 v1.20  更新 Jパッチまとめ  @GET_STRAINNAMEに華扇追加。酔い加減表示関数微変更
;20110427 v1.21  更新 Jパッチまとめ  @GET_STRAINNAMEに響子、芳香追加
;20110525 v1.22  更新 （・△・）     酒気ゲージ、空気ゲージをカラーバーで表記できるよう変更
;20111127 v1.23  更新 Jパッチまとめ  @GET_STRAINNAMEに神霊廟キャラ他追加
;--------------------------------------------------

;--------------------------------------------------
;キャラ種族番号格納関数@GET_STRAINNAME CFLAG14
;@GET_STRAINCORR_VALUEを用いて取得した種族をCFLAGに格納するだけの関数
;--------------------------------------------------
@GET_STRAINVALUE
COUNT = 0
REPEAT CHARANUM
	L = COUNT
	CALL GET_STRAINCORR_VALUE
	RESULT = L
	IF RESULT != 99
		;格納
		CFLAG:COUNT:14 = RESULT
	ELSE
		;該当データが無い場合は0を格納
		CFLAG:COUNT:14 = 0
	ENDIF
REND
RETURN 0

;--------------------------------------------------
;不在キャラ種族名獲得関数@GET_STRAINNAME
;対象のキャラ番号を変数Lに入力してからCALL
;この場にいないキャラの番号から名前と、そのキャラの種族を獲得します。
;獲得した呼び名は201、大雑把な種族名が202、詳細な種族名を203に格納します。
;誰にも当てはまらなかった場合・99の名無しキャラの場合はRESULTに0が返ります。
;それ以外の場合、RESULTは種族を表します。
;PANCTIONのLOSTNAME関数を改変して種族管理パッチ用に作成。
;数値 0：妖精 1：人間 2：妖怪兎 3：人形 4：魔界人 5：天狗 6：妖怪 7:神 8:蓬莱人
;     9:魔法使い 10:幽霊 11:吸血鬼 12:天人 13:鬼 14:月人 15:悪魔 16:仙人 17:僵尸（広東語で音読みで、きょうし、と読む）
;--------------------------------------------------
@GET_STRAINNAME
IF L == 0
	STR:201 = あなた
	STR:202 = 人間
	STR:203 = 人間
	RETURN 1
ELSEIF L == 11
	STR:201 = 春香
	STR:202 = 人間
	STR:203 = 人間
	RETURN 1
ELSEIF L == 12
	STR:201 = 千早
	STR:202 = 人間
	STR:203 = 人間
	RETURN 1
ELSEIF L == 13
	STR:201 = 雪歩
	STR:202 = 人間
	STR:203 = 人間
	RETURN 1
ELSEIF L == 14
	STR:201 = やよい
	STR:202 = 人間
	STR:203 = 人間
	RETURN 1
ELSEIF L == 15
	STR:201 = 律子
	STR:202 = 人間
	STR:203 = 人間
	RETURN 1
ELSEIF L == 16
	STR:201 = 伊織
	STR:202 = 人間
	STR:203 = 人間
	RETURN 1
ELSEIF L == 17
	STR:201 = 真
	STR:202 = 人間
	STR:203 = 人間
	RETURN 1
ELSEIF L == 18
	STR:201 = あずさ
	STR:202 = 人間
	STR:203 = 人間
	RETURN 1
ELSEIF L == 19
	STR:201 = 亜美
	STR:202 = 人間
	STR:203 = 人間
	RETURN 1
ELSEIF L == 20
	STR:201 = 真美
	STR:202 = 人間
	STR:203 = 人間
	RETURN 1
ELSEIF L == 21
	STR:201 = 美希
	STR:202 = 人間
	STR:203 = 人間
	RETURN 1
ELSEIF L == 22
	STR:201 = 小鳥
	STR:202 = 人間
	STR:203 = 人間
	RETURN 1
ELSEIF L == 23
	STR:201 = 響
	STR:202 = 人間
	STR:203 = 人間
	RETURN 1
ELSEIF L == 24
	STR:201 = 貴音
	STR:202 = 人間
	STR:203 = 人間
	RETURN 1
ELSEIF L == 100
	STR:201 = 閣下
	STR:202 = 神
	STR:203 = アイドル神
	RETURN 1
ENDIF
STR:201 = 誰か
RETURN 99

;--------------------------------------------------
;キャラ種族補正関数@GET_STRAINCORRECT
;後天的に変更可能と思われる種族補正を加味してCFLAG14に格納
;対象のキャラ登録番号を変数Lに入力してからCALL
;数値 0：妖精 1：人間 2：妖怪兎 3：人形 4：魔界人 5：天狗 6：妖怪 7:神 8:蓬莱人
;     9:魔法使い 10:幽霊 11:吸血鬼 12:天人 13:鬼 14:月人 15:悪魔
;種族の優先度は、蓬莱人 > 吸血鬼 > 他です。タグだけ見て変わります。
;純粋に補正のみの関数に変更
;--------------------------------------------------
@GET_STRAINCORRECT
;素質「蓬莱人」持ちなら種族を蓬莱人にする
IF TALENT:L:128 != 0
	CFLAG:L:14 = 8
;素質「吸血鬼持ち」なら種族を吸血鬼に変更
ELSEIF TALENT:L:114 != 0
	CFLAG:L:14 = 11
;ハクタク化している場合は妖怪に変更
ELSEIF TEQUIP:L:1 != 0
	CFLAG:L:14 = 6
ENDIF
RETURN 0

;--------------------------------------------------
;キャラ種族取得関数(補正込み)@GET_STRAINCORR_VALUE
;後天的に変更可能と思われる種族補正を加味した値を返す
;対象のキャラ登録番号を変数Lに入力してからCALL
;数値 0：妖精 1：人間 2：妖怪兎 3：人形 4：魔界人 5：天狗 6：妖怪 7:神 8:蓬莱人
;     9:魔法使い 10:幽霊 11:吸血鬼 12:天人 13:鬼 14:月人 15:悪魔
;種族の優先度は、蓬莱人 > 吸血鬼 > 他です。タグだけ見て変わります。
;eramakerだと整数の直接指定しか出来ない為、Lを取得してください
;--------------------------------------------------
@GET_STRAINCORR_VALUE
;素質「蓬莱人」持ちなら種族を蓬莱人にする
IF TALENT:L:128 != 0
	L = 8
;素質「吸血鬼持ち」なら種族を吸血鬼に変更
ELSEIF TALENT:L:114 != 0
	L = 11
;ハクタク化している場合は6
ELSEIF TEQUIP:L:1 != 0
	L = 6
ELSE
	L = NO:L
	CALL GET_STRAINNAME
	L = RESULT
ENDIF
RETURN 0

;--------------------------------------------------
;ビット数指定でビット立てる関数@BIT_ON
;プログラム初心者用に需要を無視して作ってみた
;Lに立てたいフラグ番号
;M:0(=M)にキャラ登録番号(CFLAGの場合のみ指定)
;M:1に立てたいフラグの種類(0:FLAG/1:TFLAG/2:CFLAG/3:TEQUIP)
;M:2に立てたいビット数(何ビット目か)
;M:3に算出値を格納
;M:4を用いて、COUNTを元の値に戻す
;M:5に、関数呼び出し前のRESULTの値を保持
;LもMの変数に置換したかったのですが、eramakerだとFLAG:(M:*):2みたいな使い方が出来ないので断念
;--------------------------------------------------
@BIT_ON
;立てたいビットが指定されていない場合異常終了とする
SIF M:2 == 0
	RETURN 1

M:5 = RESULT
;落とすビットを10進数化
CALL BIT_DECIMAL

;FLAG
IF M:1 == 0
	FLAG:L |= M:3
;TFLAG
ELSEIF M:1 == 1
	TFLAG:L |= M:3
;CFLAG
ELSEIF M:1 == 2
	CFLAG:M:L |= M:3
;TEQUIP
ELSEIF M:1 == 3
	TEQUIP:L |= M:3
ENDIF
RETURN 0

;--------------------------------------------------
;ビット数指定でビット落とす関数@BIT_OFF
;プログラム初心者用に需要を無視して作ってみた
;Lに落としたいフラグ番号
;M:0(=M)にキャラ登録番号(CFLAGの場合のみ指定)
;M:1に落としたいフラグの種類(0:FLAG/1:TFLAG/2:CFLAG/3:TEQUIP)
;M:2に落としたいビット数(何ビット目か)
;M:3に算出値を格納
;M:4を用いて、COUNTを元の値に戻す
;M:5に、関数呼び出し前のRESULTの値を保持
;LもMの変数に置換したかったのですが、eramakerだとFLAG:(M:*):2みたいな使い方が出来ないので断念
;--------------------------------------------------
@BIT_OFF
;落としたいビットが指定されていない場合異常終了とする
SIF M:2 == 0
	RETURN 1

M:5 = RESULT
;落とすビットを10進数化
CALL BIT_DECIMAL

;FLAG
IF M:1 == 0
	FLAG:L -= M:3
;TFLAG
ELSEIF M:1 == 1
	TFLAG:L -= M:3
;CFLAG
ELSEIF M:1 == 2
	CFLAG:M:L -= M:3
;TEQUIP
ELSEIF M:1 == 3
	TEQUIP:L -= M:3
ENDIF
RETURN 0

;--------------------------------------------------
;ビット数指定でビット立っているか確認する関数@BIT_COMP
;プログラム初心者用に需要を無視して作ってみた
;Lに確認したいフラグ番号
;M:0(=M)にキャラ登録番号(CFLAGの場合のみ指定)
;M:1に確認したいフラグの種類(0:FLAG/1:TFLAG/2:CFLAG/3:TEQUIP)
;M:2に確認したいビット数(何ビット目か)
;M:3に算出値を格納
;M:4を用いて、COUNTを元の値に戻す
;M:5に、関数呼び出し前のRESULTの値を保持
;RESULTが1なら立っている。0なら立っていない。異常の場合99を返す
;LもMの変数に置換したかったのですが、eramakerだとFLAG:(M:*):2みたいな使い方が出来ないので断念
;--------------------------------------------------
@BIT_COMP
;確認したいビットが指定されていない場合異常終了とする
SIF M:2 == 0
	RETURN 99

M:5 = RESULT
;落とすビットを10進数化
CALL BIT_DECIMAL

;FLAG
IF M:1 == 0
	SIF (FLAG:L & M:3) != 0
		RETURN 1
;TFLAG
ELSEIF M:1 == 1
	SIF (TFLAG:L & M:3) != 0
		RETURN 1
;CFLAG
ELSEIF M:1 == 2
	SIF (CFLAG:M:L & M:3) != 0
		RETURN 1
;TEQUIP
ELSEIF M:1 == 3
	SIF (TEQUIP:L & M:3) != 0
		RETURN 1
ENDIF
RETURN 0

;--------------------------------------------------
;指定ビットを10進数で返す関数@BIT_DECIMAL
;プログラム初心者用に需要を無視して作ってみた
;M:2に10進数化したいビット数(何ビット目か)
;M:3に算出値を格納
;M:4を用いて、COUNTを元の値に戻す
;eramakerだと整数の直接指定しか出来ない為、M:3から取得して下さい
;--------------------------------------------------
@BIT_DECIMAL
;10進化したいビット数が指定されていない場合は1を返す
SIF M:2 == 0
	RETURN 1

M:2 -= 1
;M:3の初期化
M:3 = 1

;COUNTの値を退避
M:4 = COUNT

;10進数化計算
IF M:2 != 0
	REPEAT M:2
		M:3 *= 2
	REND
ENDIF

;戻し
COUNT = M:4
RETURN 0

;--------------------------------------------------
;登録番号抽出関数@GET_REGIST_NO
;Lに検索対象のキャラ番号を入れてCALL。
;手元の全キャラと照合して登録番号を返します。
;手元にいない場合、RESULTに-1が返ります。
;PANCTIONの物を使用変数を減らし、ついでに効率化を図ってみた。
;eramakerだと整数の直接指定しか出来ない為、COUNTから取得して下さい
;--------------------------------------------------
@GET_REGIST_NO
REPEAT CHARANUM
	SIF CFLAG:COUNT:21 == 1
		CONTINUE
	IF NO:COUNT == L
		RETURN 0
	ENDIF
REND
RETURN -1

;--------------------------------------------------
;登録番号抽出関数@GET_REGIST_NO2
;Lに検索対象のキャラ番号を入れてCALL。
;手元の全キャラと照合して登録番号を返します。
;手元にいない場合、RESULTに-1が返ります。
;引継ぎありで別れたキャラでも引っ張れます
;PANCTIONの物を使用変数を減らし、ついでに効率化を図ってみた。
;eramakerだと整数の直接指定しか出来ない為、COUNTから取得して下さい
;--------------------------------------------------
@GET_REGIST_NO2
REPEAT CHARANUM
	IF NO:COUNT == L
		RETURN 0
	ENDIF
REND
RETURN -1

;--------------------------------------------------
;登録番号抽出関数(ボスとして出現口上専用)@GET_REGIST_NO_B
;Lに検索対象のキャラ番号を入れてCALL。
;手元の全キャラと照合して登録番号を返します。
;手元にいない場合、RESULTに-1が返ります。
;PANCTIONの物を使用変数を減らし、ついでに効率化を図ってみた。
;eramakerだと整数の直接指定しか出来ない為、COUNTから取得して下さい
;ボスとして出現口上中はCHARANUMの最後にボス分が追加されている
;--------------------------------------------------
@GET_REGIST_NO_B
REPEAT CHARANUM-1
	SIF CFLAG:COUNT:21 == 1
		CONTINUE
	IF NO:COUNT == L
		RETURN 0
	ENDIF
REND
RETURN -1

;--------------------------------------------------
;登録番号抽出関数(ボスとして出現口上専用)@GET_REGIST_NO_B2
;Lに検索対象のキャラ番号を入れてCALL。
;手元の全キャラと照合して登録番号を返します。
;手元にいない場合、RESULTに-1が返ります。
;引継ぎありで別れたキャラでも引っ張れます
;PANCTIONの物を使用変数を減らし、ついでに効率化を図ってみた。
;eramakerだと整数の直接指定しか出来ない為、COUNTから取得して下さい
;ボスとして出現口上中はCHARANUMの最後にボス分が追加されている
;--------------------------------------------------
@GET_REGIST_NO_B2
REPEAT CHARANUM-1
	IF NO:COUNT == L
		RETURN 0
	ENDIF
REND
RETURN -1

;-------------------------------------------------
;朝夜イベント兼、調教後行動、待機中行動等回避用素質変更関数@EVENT_ESCAPE
;朝夜イベントが発生しない程度の素質変更を行っておく
;CFLAG559を使用しているので被ってない事確認した上で使用すること
;パッチまとめを導入している場合はそちらを使ったほうが無難。
;-------------------------------------------------
@EVENT_ESCAPE
;待機行動を強制的に無しにする+退避した事を記録
CFLAG:559 = CFLAG:13 + 1
CFLAG:13 = 0

;朝夜イベントを全カット
CFLAG:97 = 16382
CFLAG:98 = 127

RETURN 0

;-------------------------------------------------
;朝夜イベント兼、調教後行動、待機中行動等復活用素質変更関数@EVENT_BACK
;朝夜イベントが発生するように素質を戻しておく
;EVENT_ESCAPEとEVENT_BACKセットで使用すること
;CFLAG559を使用しているので被ってない事確認した上で使用すること
;-------------------------------------------------
@EVENT_BACK
;1以上なら少なくとも好感度の正負反転は行ったとする
IF CFLAG:559 > 0
	;待機行動を戻す。実行判定用に１余計に足してあるので15で論理輪を取り、さらに1引いた数を代入
	;待機行動は0〜12までを使用している為、３つ増えなければ問題ない
	CFLAG:13 = (CFLAG:559 & 15) - 1

	;朝夜イベントカットを戻す
	CFLAG:97 = 0
	CFLAG:98 = 0
ENDIF
RETURN 0

;-------------------------------------------------
;ロード画面呼び出し処理 @LOAD_FUNC
;ロード画面を呼ぶだけの関数ありそうで無かった子
;@EVENT_TRAIN中で呼ばない事(エラーで落ちます)
;-------------------------------------------------
@LOAD_FUNC
FLAG:60 = 1
BEGIN SHOP

;-------------------------------------------------
;ロード画面呼び出しorリトライ処理 @RETRY_OR_LOAD_FUNC
;ロード画面を呼ぶか、その日の朝に戻るか選択式関数
;@EVENT_TRAIN中で呼ばない事(エラーで落ちます)
;-------------------------------------------------
@RETRY_OR_LOAD_FUNC
$IL_RETRY_OR_LOAD
PRINTL  [0]リトライ
PRINTL  [1]ロード
INPUT
SIF (RESULT+1) < 1 || RESULT > 1
	GOTO IL_RETRY_OR_LOAD
IF RESULT == 1
	FLAG:60 = 1
	PRINTFORMW 先ほどのやり取りは、ハクタク先生に無かった事にしてもらいました
	PRINTFORMW %CALLNAME:MASTER%の体力が1まで回復した
	BASE:MASTER:0 = 1
ENDIF
BEGIN SHOP

;-------------------------------------------------
;指定素質所持者検索関数 @SEARCH_TALENT_FUNC
;指定した素質を持つキャラの登録番号を検索する関数です
;尚、最初にヒットしたキャラの登録番号を検索結果とします
;Lに探したい素質番号を代入
;COUNTに検索にヒットしたキャラ登録番号を格納します
;RESULTが0だったら検索成功、1だったら検索失敗
;-------------------------------------------------
@SEARCH_TALENT_FUNC
REPEAT CHARANUM
	;主人はスルー
	SIF COUNT == 0
		CONTINUE
	;現在のパートナーもスルー
	SIF COUNT == TARGET
		CONTINUE
	SIF TALENT:COUNT:L
		RETURN 0
REND
RETURN 1

;-------------------------------------------------
;指定素質所持者数カウント関数 @COUNT_TALENT_FUNC
;指定した素質を持つキャラ数をカウントする関数です
;Lに探したい素質番号を代入
;L:1にカウント数を格納
;RESULTが0だったらカウントあり、1だったらカウントなし
;-------------------------------------------------
@COUNT_TALENT_FUNC
L:1 = 0
REPEAT CHARANUM
	SIF TALENT:COUNT:L
		L:1 += 1
REND
;カウント数が1以上なら0を返す
SIF L:1 > 0
	RETURN 0
RETURN 1

;--------------------------------------------------
;べき乗計算関数@POW
;プログラム初心者用に需要を無視して作ってみた
;M:1に基数を指定
;M:2に指数を指定
;M:3に算出値を格納
;M:4を用いて、COUNTを元の値に戻す
;eramakerだと整数の直接指定しか出来ない為、M:3から取得して下さい
;--------------------------------------------------
@ADDIN_POW
;0の0乗が指定された場合はエラーとする
SIF M:1 == 0 && M:2 == 0
	RETURN 1

;M:3の初期化
M:3 = 1

;COUNTの値を退避
M:4 = COUNT

;べき乗計算
IF M:2 != 0
	REPEAT M:2
		M:3 *= M:1
	REND
ENDIF

;戻し
COUNT = M:4
RETURN 0

;--------------------------------------------------
;2進数を10進数で返す関数@BIT_DECIMAL2
;プログラム初心者用に需要を無視して作ってみた
;M:1に2進数をセット
;M:3に算出値を格納
;M:5に、関数呼び出し前のRESULTの値を保持
;M:6を用いて、COUNTを元の値に戻す
;M:7に算出値を一時格納
;M:8に指定値を一時格納
;eramakerだと整数の直接指定しか出来ない為、M:3から取得して下さい
;格納出来る整数の都合上10ビット目までをサポート
;--------------------------------------------------
@BIT_DECIMAL2
;10進化したい2進数が指定されていない場合は1を返す
SIF M:1 == 0
	RETURN 1
;マイナス指定も不可
SIF (M:1+100000) < 100000
	RETURN 1
;格納出来る整数の都合上10桁まで
SIF M:1 > 1111111111
	RETURN 1

;変数の初期化
M:7 = 0
M:8 = 0

M:8 = M:1
;COUNTの値を退避
M:6 = COUNT
M:5 = RESULT

;10進数化計算
REPEAT 11
	M:1 = 10
	M:2 = COUNT
	CALL ADDIN_POW
	COUNT = M:4
	;該当桁で割って0なら計算しない
	SIF (M:8 / M:3) == 0
		BREAK
	;ビットが立っている場合のみ加算
	IF (M:8 / M:3 % 10) == 1
		M:2 += 1
		CALL BIT_DECIMAL
		COUNT = M:4
		M:7 += M:3
	ENDIF
REND

$CALC_END

;戻し
COUNT = M:6
RESULT = M:5
M:1 = M:8
M:3 = M:7
RETURN 0

;--------------------------------------------------
;最大値取得関数@ADDIN_MAX
;プログラム初心者用に需要を無視して作ってみた
;0のデータがあっても無問題なのでデータ数を先に指定すべし
;最大値が二つ以上あっても最初が優先されます。
;A配列にデータを格納(A:0〜A:(C-1))
;A:Cに最大値を格納しておく
;M:3に最大値の要素番号を格納
;M:4を用いて、COUNTを元の値に戻す
;eramakerだと整数の直接指定しか出来ない為、M:3から取得して下さい
;--------------------------------------------------
@ADDIN_MAX
;データ数0なら異常終了
SIF C == 0
	RETURN 1

;隔離
M:6 = COUNT
;初期化
A:C = 0

;有効データチェック
REPEAT C
	SIF A:COUNT > 0
		A:C += 1
REND
;有効データが無い場合終了
SIF A:C == 0
	RETURN 1

;変数の初期化
M:3 = 0
A:C = 0

;最大値と要素番号チェック
REPEAT C
	IF A:C < A:COUNT
		A:C = A:COUNT
		M:3 = COUNT
	ENDIF
REND

;戻し
COUNT = M:6

RETURN 0
